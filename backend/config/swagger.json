{
  "openapi": "3.0.0",
  "info": {
    "title": "BMI API Documentation",
    "version": "1.0.0",
    "description": "API Documentation for the BMI App"
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      },
      "googleOauth2": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://accounts.google.com/o/oauth2/auth",
            "tokenUrl": "https://oauth2.googleapis.com/token",
            "scopes": {
              "email": "Access to your email address",
              "profile": "Access to your basic profile info"
            }
          }
        }
      },
      "facebookOauth2": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://www.facebook.com/v10.0/dialog/oauth",
            "tokenUrl": "https://graph.facebook.com/v10.0/oauth/access_token",
            "scopes": {
              "email": "Access to your email address",
              "public_profile": "Access to your publis profile information"
            }
          }
        }
      }
    }
  },
  "paths": {
    "/auth/google": {
      "get": {
        "summary": "Google OAuth Login",
        "description": "Redirects the user to Google for OAuth login.",
        "tags": ["Social signup"],
        "security": [],
        "responses": {
          "302": {
            "description": "Redirect to Google authentication page."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/auth/google/callback": {
      "get": {
        "summary": "Google OAuth Callback",
        "description": "Handles the callback after Google OAuth authentication.",
        "tags": ["Social signup"],
        "security": [
          {
            "googleOauth2": ["email", "profile"]
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully authenticated."
          },
          "400": {
            "description": "Authentication failure."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/auth/facebook": {
      "get": {
        "summary": "Facebook OAuth Login",
        "description": "Redirects the user to Facebook for OAuth login.",
        "tags": ["Social signup"],
        "security": [],
        "responses": {
          "302": {
            "description": "Redirect to facebook authentication page."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/auth/facebook/callback": {
      "get": {
        "summary": "Facebook OAuth Callback",
        "description": "Handles the callback after Facebook OAuth authentication.",
        "tags": ["Social signup"],
        "security": [
          {
            "facebookOauth2": ["email", "public_profile"]
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully authenticated."
          },
          "400": {
            "description": "Authentication failure."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/set-password": {
      "post": {
        "summary": "Set password",
        "description": "Allows a user to set a new password using a temporary password.",
        "tags": ["Social signup"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userId": { "type": "string", "example": "12345" },
                  "tempPassword": { "type": "string", "example": "TempPass123!" },
                  "password": { "type": "string", "example": "NewPassword123!"}
                },
                "required": ["userId", "tempPassword", "password"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password successfully set."
          },
          "400": {
            "description": "Invalid inout or temporary password."
          },
          "404": {
            "description": "User not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/verify-email" : {
      "post": {
        "summary": "Initiate email verification for user registration",
        "description": "Sends a verification code to the user's email. This endpoint requires the user's email, fullname, password and username.",
        "tags": ["Authentication"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": { "type": "string", "example": "user@example.com" },
                  "fullname": { "type": "string", "example": "John Doe" },
                  "password": { "type": "string", "example": "Password123!" },
                  "username": { "type": "string", "example": "Divine"}
                },
                "required": ["email", "fullname", "password", "username"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Verification code sent to email successfully."
          },
          "400": {
            "description": "Invalid input or user already exists."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/signup": {
      "post": {
        "summary": "Sign up a new user",
        "description": "Create a new user account",
        "tags": ["Authentication"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": { "type": "string", "example": "user@example.com" },
                  "verificationCode": { "type": "number", "example": "1234" },
                  "age": { "type": "integer", "example": 30 },
                  "gender": { "type": "string", "example": "male" },
                  "country": { "type": "string", "example": "USA" },
                  "preferredLanguage": { "type": "string", "example": "English" }
                },
                "required": ["email", "verificationCode"]
              }
            }
          }
        },
        "responses": {
          "201": { "description": "User verified and signed up successfully." },
          "400": { "description": "Verification code expired, invalid, or missing fields." },
          "500": { "description": "Internal server error."}
        }
      }
    },
    "/login": {
      "post": {
        "summary": "Log in a user",
        "description": "Authenticate a user and return a token.",
        "tags": ["Authentication"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": { "type": "string" },
                  "password": { "type": "string" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User logged in successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": { "type": "string", "description": "Authentication token." }
                  }
                }
              }
            }
          },
          "400": { "description": "Error logging in." },
          "401": { "description": "Unauthorized." }
        }
      }
    },
    "/refresh-token": {
      "post": {
        "summary": "Refresh the authentication token",
        "description": "Refresh the user's token if it is about to expire.",
        "tags": ["Authentication"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "refreshToken": {
                    "type": "string",
                    "description": "The current authentication token that is about to expire."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Token refreshed successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "sessionToken": {
                      "type": "string",
                      "description": "The new refreshed token."
                    }
                  }
                }
              }
            }
          },
          "400": { "description": "Error refreshing token, Bad Request." },
          "401": { "description": "Unauthorized, invalid or expired token." }
        }
      }
    },
    "/logout": {
      "post": {
        "summary": "Logs out the user",
        "description": "Logs out the user and removes the authenticated tokens from Redis.",
        "tags": ["Authentication"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "sessionToken": {
                    "type": "string",
                    "description": "The user's session token"
                  },
                  "refreshToken": {
                    "type": "string",
                    "description": "The user's refresh token"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Logged out successfully." },
          "400": { "description": "Error logging out." }
        }
      }
    },
    "/request-password-reset": {
      "post": {
        "summary": "Request a password reset",
        "description": "Generates a password reset code and sends it to the user's email.",
        "tags": ["Authentication"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "The user's registered email address."
                  }
                },
                "required": ["email"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Password reset code sent successfully." },
          "400": { "description": "Invalid email address or error sending password reset code." },
          "404": { "description": "User not found." },
          "500": { "description": "Server error." }
        }
      }
    },
    "/reset-password": {
      "post": {
        "summary": "Reset the password",
        "description": "Reset the user's password using the reset code.",
        "tags": ["Authentication"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "The user's registered email address."
                  },
                  "resetCode": {
                    "type": "string",
                    "description": "The 4-digit password reset code sent to the user's email."
                  },
                  "newPassword": {
                    "type": "string",
                    "description": "The new password for the user."
                  }
                },
                "required": ["email", "resetCode", "newPassword"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Password reset successfully." },
          "400": { "description": "Invalid or expired code, or error resetting password." },
          "404": { "description": "User not found." },
          "500": { "description": "Server error." }
        }
      }
    },
    "/profile": {
      "get": {
        "summary": "Get user's profile information",
        "description": "Retrieve the current user's profile data.",
        "tags": ["Profile management"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Profile retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "fullname": { "type": "string" },
                    "username": { "type": "string" },
                    "age": { "type": "integer" },
                    "gender": { "type": "string" },
                    "country": { "type": "string" },
                    "preferredLanguage": { "type": "string" },
                    "last_updated_at": { "type": "string", "format": "date-time" },
                    "created_at": { "type": "string", "format": "date-time" }
                  }
                }
              }
            }
          },
          "400": { "description": "Unauthorized, user not found or token invalid/expired" },
          "500": { "description": "Internal server error" }
        }
      },
      "put": {
        "summary": "Update's user profile",
        "description": "Update specific profile details such as fullname, age, gender, country, height, weight or preferred language.",
        "tags": ["Profile management"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "fullname": {
                    "type": "string",
                    "description": "The user's fullname",
                    "example": "John Doe"
                  },
                  "username": {
                    "type": "string",
                    "description": "The user's username",
                    "example": "Divine"
                  },
                  "age": {
                    "type": "integer",
                    "description": "The user's age",
                    "example": 30
                  },
                  "gender" : {
                    "type": "integer",
                    "description": "The user's gender",
                    "example": "male"
                  },
                  "country": {
                    "type": "string",
                    "description": "The user's country",
                    "example": "USA"
                  },
                  "preferredLanguage": {
                    "type": "string",
                    "description": "The user's preferred language",
                    "example": "English"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Profile updated successfully" },
                    "user": {
                      "type": "object",
                      "properties": {
                        "fullname": { "type": "string", "example": "John Doe" },
                        "username": { "type": "string", "example": "Divine"},
                        "age": { "type": "integer", "example": 30 },
                        "gender": { "type": "string", "example": "male" },
                        "country": { "type": "string", "example": "USA" },
                        "preferredLanguage": { "type": "string", "example": "English" },
                        "last_updated_at": { "type": "string", "format": "date-time" },
                        "created_at": { "type": "string", "format": "date-time" }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input. Validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Fullname must be a string" }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "User not found" }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "User's details cannot be updated at the moment" }
                  }
                }
              }
            }
          }
        }
      },
      "delete" : {
        "summary": "Deletes the user's profile and account",
        "description": "Deletes the user's profile and account",
        "tags": ["Profile management"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User profile and account deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "User profile and account deleted successfully"}
                  }
                }
              }
            }
          },
          "400": {
            "description": "Token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Expired token" }
                  }
                }
              }
            }
          },
          "404": { 
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                    "properties": {
                      "message": { "type": "string", "example": "User not found" }
                  }
                }
              }
            }

          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                    "properties": {
                      "message": { "type": "string", "example": "Internal server error" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/bmi/calculate": {
      "post": {
        "summary": "Calculate BMI based on input height and weight",
        "description": "Calculates the user's BMI based on input height and weight and unit for the calculation",
        "tags": ["BMI management"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type":"object",
                "properties": {
                  "height": { 
                    "type": "number",
                    "format": "float",
                    "description": "The user's height value",
                    "example": 1.73
                  },
                  "weight": {
                    "type": "number",
                    "format": "float",
                    "description": "The user's weight value",
                    "example": 70
                  },
                  "unit" : {
                    "type": "string",
                    "description": "The user's preferred unit for the height and weight values",
                    "example": "metric",
                    "enum": ["metric", "imperial"]
                  },
                  "heightunit": {
                    "type": "string",
                    "description": "The unit for height (e.g., 'cm', 'm', 'in', 'ft')",
                    "example": "cm",
                    "enum": ["cm", "m", "in", "ft"]
                  },
                  "weightunit": {
                    "type": "string",
                    "description": "The unit for weight (e.g., 'kg', 'g', 'lbs', 'st')",
                    "example": "kg",
                    "enum": ["kg", "g", "lbs", "st"]
                  },
                  "age": {
                    "type": "integer",
                    "description": "The user's age in years",
                    "example": 25
                  },
                  "gender": {
                    "type": "string",
                    "description": "The user's gender",
                    "example": "male",
                    "enum": ["male", "female", "other"]
                  },
                  "country": {
                    "type": "string",
                    "description": "The user's country of residence",
                    "example": "USA"
                  }
                },
                "required": ["height", "weight", "unit", "age", "gender", "country"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully calculated and returned the user's BMI value and category",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "bmi": {
                      "type": "number",
                      "format": "float",
                      "description": "User's BMI value",
                      "example": "22.86"
                    },
                    "category": {
                      "type": "string",
                      "description": "The user's BMI value category",
                      "example": "Normal weight"
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description": "Invalid input. Validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Height and weight must be a valid float number"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found", 
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/bmi/history": {
      "get": {
        "summary": "Retrieves a user's BMI history",
        "description": "Fetch all BMI records for the authenticated user, grouped by height, weight, unit, BMI value, category, and creation date. Supports pagination.",
        "tags": ["BMI management"],
        "produces": ["application/json"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "required": false,
            "type": "integer",
            "default": 1
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records per page",
            "required": false,
            "type": "integer",
            "default": 10
          }
        ],
        "responses":{
          "200": {
            "description": "Successful retrieval of BMI history",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "BMI records retrieved successfully"
                    },
                    "total": {
                      "type": "integer",
                      "example": 1
                    },
                    "currentPage": {
                      "type": "integer",
                      "example": "1"
                    },
                    "totalPages": {
                      "type": "integer",
                      "example": 1
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "height": { "type": "number", "example": 175 },
                          "weight": { "type": "number", "example": 70 },
                          "unit": { "type": "string", "example": "metric" },
                          "bmi": { "type": "number", "example": 22.88 },
                          "category": { "type": "string", "example": "Normal weight" },
                          "createdAt": { "type": "string", "format": "date-time", "example": "2024-09-26T12:34:56Z" }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "An error occured while retrieving BMI records"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
